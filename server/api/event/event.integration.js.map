{"version":3,"sources":["../../../../server/api/event/event.integration.js"],"names":["app","require","newEvent","describe","events","beforeEach","done","get","expect","end","err","res","body","it","to","be","instanceOf","Array","post","send","name","info","equal","event","_id","afterEach","updatedEvent","put","delete"],"mappings":"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","file":"event.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newEvent;\n\ndescribe('Event API:', function() {\n\n  describe('GET /api/events', function() {\n    var events;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/events')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          events = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      expect(events).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/events', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/events')\n        .send({\n          name: 'New Event',\n          info: 'This is the brand new event!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newEvent = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created event', function() {\n      expect(newEvent.name).to.equal('New Event');\n      expect(newEvent.info).to.equal('This is the brand new event!!!');\n    });\n\n  });\n\n  describe('GET /api/events/:id', function() {\n    var event;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/events/' + newEvent._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          event = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      event = {};\n    });\n\n    it('should respond with the requested event', function() {\n      expect(event.name).to.equal('New Event');\n      expect(event.info).to.equal('This is the brand new event!!!');\n    });\n\n  });\n\n  describe('PUT /api/events/:id', function() {\n    var updatedEvent;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/events/' + newEvent._id)\n        .send({\n          name: 'Updated Event',\n          info: 'This is the updated event!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedEvent = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedEvent = {};\n    });\n\n    it('should respond with the updated event', function() {\n      expect(updatedEvent.name).to.equal('Updated Event');\n      expect(updatedEvent.info).to.equal('This is the updated event!!!');\n    });\n\n  });\n\n  describe('DELETE /api/events/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/events/' + newEvent._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when event does not exist', function(done) {\n      request(app)\n        .delete('/api/events/' + newEvent._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}